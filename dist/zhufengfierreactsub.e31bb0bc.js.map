{"version":3,"sources":["constants.js","UpdateQuenu.js","unit.js","scheduler.js","react.js","react-dom.js","index.js"],"names":["ELEMENT_TEXT","Symbol","for","TAG_ROOT","TAG_HOST","TAG_TEXT","TAG_CLASS","TAG_FUNCTION_COMPONENT","PLACEMENT","UPDATE","DELETION","Update","payload","UpdateQueue","firstUpdate","lastUpdate","update","nextUpdate","state","currentUpdate","nextState","setProps","dom","oldProps","newProps","key","hasOwnProperty","setProp","removeAttribute","value","test","toLowerCase","styleName","style","setAttribute","nextUnitOfWork","workInProgressRoot","currentRoot","workInProgressFiber","hookIndex","deletion","scheduleRoot","rootFiber","alternate","props","console","log","firstEffect","lastEffect","nextEffect","requestIdleCallback","workLoop","timeout","deadLine","shouldYield","performUnitOfWork","timeRemaining","commitRoot","forEach","commitWork","currentFiber","length","returnFiber","return","tag","returnDOM","stateNode","effectTag","nextFiber","child","appendChild","commitDeletion","type","text","textContent","updatDOM","domReturn","removeChild","beginWork","completeUnitOfWork","sibling","updateHostRoot","updateHostText","updateHost","updateClassComponent","updateFunctionComponent","newChildren","children","reconcilieChildren","createDom","internalFiber","updateQueue","forceUpdate","render","hooks","newChild","document","createTextNode","createElement","newChildIndex","prevSibling","oldFiber","newFiber","sameType","prototype","isReactComponent","push","useReducer","reducer","initalValue","newHook","dispatch","action","enqueueUpdate","config","map","Component","playload","React","ReactDOM","element","container","FunctionCounter","count","countState","getElementById"],"mappings":";;AMAA;;AACA;;ANDO,IAAMA,YAAY,GAAGC,MAAM,CAACC,GAAP,CAAW,cAAX,CAArB;AKAP,ADAA,AFAO,SAASmB,QAAT,CAAkBC,GAAlB,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;AFE3C,AGMP,ADPI,IFCSrB,GEDJ,IAAIsB,CFCQ,EEDjB,CFCoBxB,GEDJsB,GFCU,CAACrB,GAAP,CAAW,AED/B,EAA0B,QFCN,CAAjB;AKDP,ADAA,AFCQ,QAAIuB,GAAG,KAAK,UAAZ,EAAwB;AFCzB,AGMP,ADNY,IFACrB,MEAGoB,EFAK,GAAGvB,GEAA,CAACyB,EFAK,CAACxB,GAAP,CAAW,OEAnB,CAAwBuB,EFAhB,CAAjB,AEAS,CAAJ,EAAkC;AGD9C,ADAA,AFEgBE,IGFV4F,IHEU5F,IGFF,GAAG,AHEM,CAACL,GAAD,EAAMG,GAAN,EAAWD,QAAQ,CAACC,GAAD,CAAnB,CAAP;AFAT,AKDHoE,AFOJ,ADLa,EGFTA,ELCSxF,GEDD,CGAF,EAANwF,ELCiB,CECF,EFDK5F,MAAM,CAACC,GAAP,CAAW,cAAX,CAAjB,EAEP;AKJiB,AHIDoB,CGJhB,OHIgBA,GAAG,CAACM,eAAJ,CAAoBH,GAApB;AGAhB,AHCa;AFAN,AKAP,AHCS,IFDInB,SAAS,GAAGL,MAAM,CAACC,GAAP,CAAW,WAAX,CAAlB,EACH;AKAJ,AHCK;;AFAE,AKAP,AHCI,IFDSK,GECJ,EGDAsF,EHCIpE,IGDb,AHCI,CGDY+F,GHCIhG,IGDpB,EAAyBiG,CLAU,CEC/B,EFDkCxH,AECR,KGD9B,CLA4C,CAACC,AKAT,GLAE,CAAW,wBAAX,CAA/B,EACH;AKDkC,AHE9B,IDXKS,ICWDc,IAAG,CDVX,ICUgB,UAAZ,EDVQb,ACUgB,ODV5B,EAAqB;AAAA,AKCzB,ADQI,AFCJ,ADCY,ICDRuB,EEDIO,IHEQ,CAACnB,IGFA,GAAG,AFCF,CDCO,CAACG,CCDL,IAArB,EAA0B,ODCT,CAAwBD,IAAxB,CAAL,EAAmC;AFDxC,AMRP,ADQQuC,AHEQrC,IFFHnB,AKALwD,GAAG,CHEKrC,CGFHxB,ILAS,EEEC,CFFEF,AEEDqB,GAAD,EAAMG,CFFE,CAACvB,EEET,CFFE,CAAW,AEEFsB,CGHd,OHGsB,CAACC,EFFlB,CAAlB,CEEmC,CFDtC,AECmB,CAAP;ADXR,AKER,ADOuB,AFCvB,ADEa,ICFTW,GFVSxB,OAAL,GAAeA,KEUD,EFVd,CEUiB,IAAzB,EAA8B;AFTzB,AKEL,ADOQsD,AHGC,GDVT,CIOQA,SAAS,EAAEuD,SAFC;ALGb,AMPP,ADM8B,AFC9B,ADGK,IFHQhH,AGAT4B,MHAe,GAAGpC,EGAP,GAAG,CHAU,CAACC,EGA7B,CHAsB,CAAW,AGAV,QHAD,CAAf,EACH;AMPJ,ADMQ,AHIP;AITD,ADMQ0C,AFER,IEFQA,AFEJN,KEFS,EAAE,YFEQ,GAAG,IAA1B,EAA+B;AHDxB,AMNP,ADKiBiD,ADXjB,AFgBA,IFJa7E,EKDI6E,GHKR5D,GFJY,EKDI,CLCD1B,CKDG,AHK3B,CGL4BuH,AHKXlG,GAAjB,CFJ8B,CAACpB,AEITuB,EGLK,CLCH,AEIxB,CFJmC,CEIRI,KAA3B,EAAkC,EFJV,CAAjB;AMLP,ADIe,ADVf,ADaA,ADGI,IDdShB,AEWT0B,CEPgB,CAImB,AHM/B,MAAMT,CCHD,GAAG,ADGR,CCHR,ADGmBL,ECHD,CDGV,CAAJ,EAAqB;ADbrB,AKIJ,AFNA,AFgBQH,IAAAA,GAAG,CAACG,GAAG,CAACM,WAAJ,EDdM,ACcP,CAAH,GAAyBF,KAAzB;ADdU,AKKlB,ADFoB,ADJpB,ADaA,ADGK,GGZD,AHUA,CCDAW,KDGO,GCHC,CDGGf,ECHA,CDGG,CCHlB,EAAmB,EDGI,OAAZ,EAAqB;AIThC,ADGI,ADTJ,AFgBQ,QAAII,KAAJ,EAAW,gBGPFa,SAAb;AJRI,AKMR,ADGC,ADTD,ADaA,ADGY,SDhBC5B,AEaJ2B,EDGQ,IAAIT,KDhBb,CEaR,CAAsBU,CFbK,CCgBf,GDhBJ,CCgB0Bb,GCHlC,EAAiC,ADGrB,EAA6B;ADfjC,AKMR,AFLA,ADWmC,ADInBP,QAAAA,CDhBHP,AGCJmF,EFeU,CAACjE,KAAJ,CAAUD,CDhBlB,GAAkB,AGC1B,CAAuBwC,GHDf,CGCR,AFegB,EEfa0C,EFeUrF,IEfvC,CFe4C,CEfM,AFeLG,SAAD,CAA5B;ADfX,AKML,AFNkD,ADY9C,ADIS,MCJLK,SEHOkF,EFGI,IAAIlF,WAAW,CAACM,GCZK4C,MDYpC,ECZ8C,ADYJ;AGL9C,AFPwCA,ADYQ,ADKvC,IEjB+BA,QAAU;AEQlD,AFRkD,ADa1CnD,ADKH,GANM,CCCHA,KDKG,aCLe,GAAGC,WAAW,CAACM,SAAjC;AGJR,AJUQrB,IAAAA,GAAG,CAACY,YAAJ,CAAiBT,GAAjB,EAAsBI,KAAtB;AITR,AFTI,ADaI,ADMH,QCNOa,CCbD,EHAP,MEaI,EAAe,eFbL1B,MAAd,EAAsB;AAClB,AKSR,AFTQwD,ADaIpC,ADMX,IEnBOoC,EDaIpC,ECbA,EHAA,AGAEoC,IADH,CHCMzD,SEaa,CFblB,AEamB6B,KFbC,AEapB,GAA2BF,CFb/B,EAA8B,MEaU,CAACE,KAArC;AFZA,AKSZ,AFTQA,ADaC,ICbDA,KAAK,IHAI9B,WAAL,GAAmB,KAAKC,UAAL,CGChBmG,EHDkClG,IGApC,EHAD;AACH,AKST,AFRYuE,MAAAA,CHHJ,MAEO,CGCK,EAAEA,QAAQ,CAAC4B,GAAT,CAAa,UAAA9C,KAAK,EAAI;AHAhC,AKSZ,AFT8C,ADYtCjC,IAAAA,KGHCsF,ILTQ3G,SEYS,CFZd,AEYe4B,CFZC1B,AKS5B,GAA4B,KHGpB,EFZI,CEY2BoB,EFZErB,MAA7B,GEYJ;AFXI,AKSV,AFTc,ADYR6B,IAAAA,OAAO,CAACC,CFZC/B,EGAM,ADYf,CAAY,OFZR,AGAkBsD,EDYtB,CFZsBrD,AKSEsG,CHGDlF,CCZR,IHAX,EGA4B,OESFuE,CFTf,GAA4BtC,ADY3C,KCZe,CESS,CAAiBuC,CFTU,MES3B,EAAyB;ALRhD,AKQiDe,AFRtCnD,ADYf,GAPD,CGGsDmD,KAAK,AHIpD,CCZSnD,CEQ4C,EHIjDnC,CCZS,EAAErC,QDYf,EAAiB,aCb+B;AHEtD,AKOoD,AFPrC4C,ADWU,GGJE,CAA9B,MFPkBA,KAAK,EAAE;AEOzB,AFP2B6B,ADYrB,QAAI/B,ICZiB+B,IAAI,CDYzB,CCZ2BJ,CDYZ,ICZI;AEOzB,AFPwCkB,ADa9B7C,MGNHkF,AHMGlF,MCb8B6C,GDarB,CGNnB,AHMoB5C,ICb4B,EAAE,GDaxC,GAAsBN,WAAtB;AGNV,AFPyB,ADcfD,MGPQ2E,AHOR3E,KFbR,GKMF,UHO4B,GAAGM,KFbjBxB,IEaJ,CFbR,EAAmB;AACf,AGJmD,ADiBlD,KAHD,ICdQ,CHIJC,CEaG,YFbU,GAAG,KAAKL,WAAzB;AKMN,AFNW,ADcDsB,MAAAA,CCnBU,EEYlB,eHO0B,mCACXC,WADW;AFbtB,AKMC,AFdI,ADuBGM,IGTP,EAAE,EAAC,AHSIA,KFfDxB,IEeU,EAAEkB,OFfnB,EAAsB;AAClB,AKKR,AFhBO,ADuBmB,GCvB1B,EEiBE,GHMM,IFZIjB,SAAS,GAAG,OAAOD,aAAa,CAACP,GKMpCgH,ILNe,KAAiC,CKMtC,CAACD,KAAlB,CADF,ELLwB,AKOtB,GLPoExG,aAAa,CAACP,OAAd,CAAsBM,KAAtB,CAA9C,GAA6EC,aAAa,CAACP,OAA3G;AACAM,AKME,AFNb,ADeQ,IGTK,ILNFA,GKMS,ELNJ,AKMM,mBAAM,gBLNLA,KAAP,GAAiBE,SAAjB,CAAL;AACAD,AKKkB4F,MAAAA,ELLlB5F,MKK0B,CAAC,MLLd,GAAGA,aAAa,CAACF,UAA9B;AACH,AKI+BuD,AHUhC3B,ICdFuE,ADcEvE,IGVgC2B,GHUzB,CGV6B,AHU5B1B,EGV6B,CHUrC,CAAY,OAAZ,EAAqBV,kBAArB;AGV+B,AFHnC,ADcC,GAXM,IGA2B,CAAR,CHWnB,YCdKQ,KAAZ,EAAmB;AHAf,AKG6C,AFH9B,ADcV,WFdA9B,WAAL,GAAmB,KAAKC,UAAL,GAAkB,IAArC;AACA,AKEF,AHYE8B,IAAAA,OAAO,CAACC,CFdD5B,EKAX,AHcI,CGfN,AHekB,EFdZ,KEcA,EAAqBwB,SAArB;AFbH,AKIJ,AFLO,ADeAN,IAAAA,KCfKQ,KAAL,GAAaA,KAAb,ADekB,CChBH,CAEX,CDciBF,SAArB;ACbH,ADcA;AGTL,SAASkE,OAAT,CAAiB1F,KAAjB,EAAuB8F,MAAvB,EAA+B;AAC7B,AHUE7E,EAAAA,QGVM6E,MAAM,AHUE,CGVDxC,EHUIpC,EGVnB,gBHUE;AGTA,AHWAA,EAAAA,OGXK,KAAL,MHWkB,CAACW,WAAnB,GAAiCX,kBAAkB,CAACY,UAAnB,GAAgCZ,kBAAkB,CAACa,UAAnB,GAAgC,IAAjG;AGVE,AHYFC,EAAAA,SCnBA,EEOS,QHYU,CAACC,OCnBXkE,CDmBU,EAAW,KCnB9B,EAAmB;AEORM,AFNP,ADkB4BvE,IAAAA,IGZrBuE,EFNH3G,CDkB+B,EGZvB,AHYyB,EGZxBE,CFNH,GAAG,CEMK,CAACyG,EFNFhH,GEMJ,GAAa,aFNb,CAAW0G,QAAX,CAAb,CADe,CAEX;AEKC,AHYqB,GAAX,CAAnB,GGZE;AFJE,ADiBP,WCjBY3B,aAAL,CAAmBC,WAAnB,CAA+BsB,aAA/B,CAA6CjG,MAA7C;AEKJ,AFJI,qCAJe,CAIA;AEKjB,AFJD,ADiBL,SAASmC,IGbIjC,IHab,CGbM,AHaYmC,QAAlB,EAA4B;AGjB1B,AHiB4B;AGX7B,AHYG,MAAIC,WAAW,GAAG,KAAlB,CADwB,CACA;;AGX5BiE,AHYI,SAAOpF,SGZF0D,KHYgB,CGZzB,CAAgB,EHYa,CAACvC,WAA1B,EAAuC,aGZ1B,eAAD;AAAkB,AHa1BnB,EGb0B,EHa1BA,EGb8B,EAAC,UHajB,GAAGoB,iBAAiB,CAACpB,cAAD,CAAlC;AGbQ,AFLhBiF,ADmBQ9D,EGdR,EAAgD0C,AHcxC1C,KCnBC,CAACkD,EEK8C,CAACqB,EHctC,GAAGxE,CCnBtB,CAAoBoD,MDmBU,CGdkB,AHcjBjD,CGdyC,MAAxB,CAAhD,CFLA,EEOA,CFPuC,CDmBjB,CCnBtB,IDmBiD,CAAzC,CAFmC,CAEQ;AGXnD,AFPA,ADmBK,ICnBC8D,KAAK,GAAG;AEQd,AFPIpB,EAAAA,aAAa,EAAbA,aADU;AESd,AFPIkB,ADkBA,EClBAA,IDkBI,CAACjF,IClBI,EAATiF,QDkBI,CCpBM,GDoBahF,kBAAvB,EAA2C;AGV/C,AFPIuE,ADkBIlD,EClBJkD,EDkBIlD,QClBM,EAAVkD,ADkBc;AGVlB,AFXc,ADsBT,CCtBL,EDoBI,MAEO;AGVX,AHWQzD,IAAAA,WClBOoE,QDkBY,CAACnE,QAAD,EAAW;AGVtC,AHUwCC,MAAAA,OAAO,EAAE;AGTjD,AHSsC,KAAX,CAAnB,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","file":"zhufengfierreactsub.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export const ELEMENT_TEXT = Symbol.for(\"ELEMENT_TEXT\")\r\n\r\nexport const TAG_ROOT = Symbol.for(\"TAG_ROOT\")\r\nexport const TAG_HOST = Symbol.for(\"TAG_HOST\")\r\nexport const TAG_TEXT = Symbol.for(\"ELEMENT_TEXT\")\r\n\r\n//这个是类组件\r\nexport const TAG_CLASS = Symbol.for(\"TAG_CLASS\")\r\n    // 这是个函数组件\r\nexport const TAG_FUNCTION_COMPONENT = Symbol.for(\"TAG_FUNCTION_COMPONENT\")\r\n    // 插入节点 \r\nexport const PLACEMENT = Symbol.for(\"PLACEMENT\")\r\n    //更新节点\r\nexport const UPDATE = Symbol.for(\"UPDATE\")\r\n    //删除节点\r\nexport const DELETION = Symbol.for(\"DELETION\")","export class Update {\r\n    constructor(payload) {\r\n        this.payload = payload\r\n    }\r\n}\r\n// UpdataQuenu 的数据结构是一个单链表\r\nexport class UpdateQueue {\r\n    constructor() {\r\n        this.firstUpdate = null\r\n        this.lastUpdate = null\r\n    }\r\n    enqueueUpdate(update) {\r\n        if (this.lastUpdate === null) {\r\n            this.firstUpdate = this.lastUpdate = update\r\n        } else {\r\n            this.lastUpdate.nextUpdate = update\r\n            this.lastUpdate = update\r\n        }\r\n    }\r\n    forceUpdate(state) {\r\n        let currentUpdate = this.firstUpdate\r\n        while (currentUpdate) {\r\n            let nextState = typeof currentUpdate.payload === 'function' ? currentUpdate.payload(state) : currentUpdate.payload\r\n            state = {...state, ...nextState }\r\n            currentUpdate = currentUpdate.nextUpdate\r\n        }\r\n        this.firstUpdate = this.lastUpdate = null\r\n        return state\r\n    }\r\n}","export function setProps(dom, oldProps, newProps) {\r\n    for (let key in oldProps) {\r\n        if (key !== 'children') {\r\n            if (newProps.hasOwnProperty(key)) {\r\n                setProp(dom, key, newProps[key])\r\n            } else {\r\n                dom.removeAttribute(key)\r\n            }\r\n        }\r\n    }\r\n    for (let key in newProps) {\r\n        if (key !== 'children') {\r\n            if (!oldProps.hasOwnProperty(key)) {\r\n                setProp(dom, key, newProps[key])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction setProp(dom, key, value) {\r\n    if (/^on/.test(key)) {\r\n        dom[key.toLowerCase()] = value\r\n    } else if (key === 'style') {\r\n        if (value) {\r\n            for (let styleName in value) {\r\n                dom.style[styleName] = value[styleName]\r\n            }\r\n        }\r\n    } else {\r\n        dom.setAttribute(key, value)\r\n    }\r\n}","/**\r\n * 从更节点 开始渲染调度\r\n * 两个阶段 \r\n * diff （Reconiliation） 阶段 对比新旧虚拟dom  进行增量  更新 或创建 render 阶段 这个阶段比较花时间 对任务 拆分 以一个虚拟dom 、\r\n * 节点为最先任务执行片段 此阶段可以暂停 原来 的递归深度遍历 不能暂停中断  生成结果effect list  知道那些节点更新了 那些节点新增了 那些节点删除了\r\n * 1. 根据 虚拟dom 生成fiber 数 2 收集effect List\r\n * commit 阶段 进行dom 更新或者创建 该过程不能中断 中断会导致 ui 不连续\r\n */\r\nimport { ELEMENT_TEXT, TAG_TEXT, TAG_ROOT, TAG_HOST, PLACEMENT, DELETION, UPDATE, TAG_CLASS, TAG_FUNCTION_COMPONENT } from './constants'\r\nimport { Update, UpdateQueue } from './UpdateQuenu'\r\nimport { setProps } from './unit'\r\nlet nextUnitOfWork = null // 下一个fiber\r\nlet workInProgressRoot = null //Rootfiber 的根\r\nlet currentRoot = null //渲染成功之后 当前根rootRlber\r\n\r\n\r\nlet workInProgressFiber = null // 正在工作中的fiber\r\nlet hookIndex = 0 // hooks 索引\r\n\r\nlet deletion = []; // 删除的节点 不放在effect list  所以要剔除 单独执行\r\n\r\nfunction scheduleRoot(rootFiber) { // {tag:TAG_ROOT,stateNode:container,props:{children:[element]}}\r\n    if (currentRoot && currentRoot.alternate) { // 第二次之后的渲染\r\n        workInProgressRoot = currentRoot.alternate\r\n        if (rootFiber) {\r\n            workInProgressRoot.props = rootFiber.props\r\n        }\r\n        workInProgressRoot.alternate = currentRoot\r\n        console.log('第二次以上更新', workInProgressRoot)\r\n    } else if (currentRoot) { // 如果currentRoot有值  说明至少渲染过一次  \r\n        if (rootFiber) {\r\n            rootFiber.alternate = currentRoot\r\n            workInProgressRoot = rootFiber\r\n        } else {\r\n            workInProgressRoot = {\r\n                ...currentRoot,\r\n                alternate: currentRoot\r\n            }\r\n        }\r\n        console.log('第一次更新', workInProgressRoot)\r\n    } else { // 如果是第一次渲染\r\n        console.log('初始化渲染', rootFiber)\r\n        workInProgressRoot = rootFiber\r\n    }\r\n\r\n    nextUnitOfWork = workInProgressRoot\r\n\r\n    workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = workInProgressRoot.nextEffect = null\r\n\r\n    requestIdleCallback(workLoop, { timeout: 500 })\r\n}\r\n\r\nfunction workLoop(deadLine) { // 工作循环\r\n    let shouldYield = false // 是否让出时间片 或者控制权\r\n    while (nextUnitOfWork && !shouldYield) {\r\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\r\n        shouldYield = deadLine.timeRemaining() < 1 // 执行完一个任务 没有剩余时间 交还 控制权给浏览器\r\n    }\r\n    if (!nextUnitOfWork && workInProgressRoot) {\r\n        commitRoot()\r\n    } else {\r\n        requestIdleCallback(workLoop, { timeout: 500 }) //  还有任务 再次 请求浏览器的空闲回调\r\n    }\r\n}\r\n//**commit 阶段 */\r\nfunction commitRoot() {\r\n    deletion.forEach(commitWork) // 执行effect list  之前把该删除的元素 删掉\r\n    let currentFiber = workInProgressRoot.firstEffect\r\n    while (currentFiber) {\r\n        commitWork(currentFiber)\r\n        currentFiber = currentFiber.nextEffect\r\n    }\r\n    deletion.length = 0 // 提交之后 清空deletion数组\r\n    currentRoot = workInProgressRoot // 把当前渲染成功的根fiber，赋给currentFiber\r\n    workInProgressRoot = null\r\n}\r\n\r\nfunction commitWork(currentFiber) {\r\n    if (!currentFiber) {\r\n        return\r\n    }\r\n    let returnFiber = currentFiber.return\r\n    while (returnFiber.tag !== TAG_HOST && returnFiber.tag !== TAG_ROOT && returnFiber.tag !== TAG_TEXT) {\r\n        returnFiber = returnFiber.return;\r\n    }\r\n    let returnDOM = returnFiber.stateNode\r\n    if (currentFiber.effectTag === PLACEMENT) {\r\n        // 如果要挂在 的不是dom 节点 比如类组件 Fiber 一直往下找儿子 太子 直到找一个真是dom 节点为止\r\n        if (currentFiber.tag === TAG_CLASS) {\r\n            return\r\n        }\r\n        let nextFiber = currentFiber\r\n        while (nextFiber.tag !== TAG_HOST && nextFiber.tag !== TAG_TEXT) {\r\n            nextFiber = currentFiber.child\r\n        }\r\n        returnDOM.appendChild(nextFiber.stateNode)\r\n    } else if (currentFiber.effectTag === DELETION) {\r\n        return commitDeletion(currentFiber, returnDOM)\r\n    } else if (currentFiber.effectTag === UPDATE) {\r\n        if (currentFiber.type === ELEMENT_TEXT) {\r\n            if (currentFiber.alternate.props.text !== currentFiber.props.text) {\r\n                currentFiber.stateNode.textContent = currentFiber.props.text\r\n            }\r\n        } else {\r\n            updatDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props)\r\n        }\r\n    }\r\n    currentFiber.effectTag = null\r\n}\r\n\r\nfunction commitDeletion(currentFiber, domReturn) {\r\n    if (currentFiber.tag === TAG_HOST || currentFiber.tag === TAG_TEXT) {\r\n        domReturn.removeChild(currentFiber.stateNode)\r\n    } else {\r\n        commitDeletion(currentFiber.child, domReturn)\r\n    }\r\n}\r\n\r\nfunction performUnitOfWork(currentFiber) {\r\n    beginWork(currentFiber)\r\n    if (currentFiber.child) {\r\n        return currentFiber.child\r\n    }\r\n    while (currentFiber) {\r\n        completeUnitOfWork(currentFiber) // 没有儿子 就让自己完成 看有没有弟弟 有弟弟返回弟弟 \r\n        if (currentFiber.sibling) {\r\n            return currentFiber.sibling\r\n        }\r\n        currentFiber = currentFiber.return //找到父亲  让父亲完成  再找父亲的弟弟\r\n    }\r\n}\r\n// 在完成 fiber 节点的创建 或者 fiber 节点的遍历的时候 要收集effect 组成我们的effect list   收集副作用  effect list 是单链表\r\nfunction completeUnitOfWork(currentFiber) {\r\n    let returnFiber = currentFiber.return\r\n    if (returnFiber) {\r\n        ////这一段是把自己儿子的effect 链 挂到父亲身上\r\n        if (!returnFiber.firstEffect) {\r\n            returnFiber.firstEffect = currentFiber.firstEffect\r\n        }\r\n        if (!!currentFiber.lastEffect) {\r\n            if (returnFiber.lastEffect) {\r\n                returnFiber.lastEffect.nextEffect = currentFiber.firstEffect\r\n            }\r\n            returnFiber.lastEffect = currentFiber.lastEffect\r\n        }\r\n        //////////////////分割线\r\n        // 这是把自己挂到父亲身上\r\n        // 每个effect fiber 有两个属性 firstEffect 指向第一个有副作用的子 effect fiber  lastEffect 指向最后一个 有副作用的 子 effect fiber\r\n        // 中间的用nextEffect 做成一个单链表 firstEffect = 大儿子.nextEffect 二儿子.nextEffect 三儿子  lastEffect\r\n        if (currentFiber.effectTag) { // 自己有副作用\r\n            if (returnFiber) { // A1 \r\n                if (returnFiber.lastEffect) {\r\n                    returnFiber.lastEffect.nextEffect = currentFiber\r\n                } else {\r\n                    returnFiber.firstEffect = currentFiber\r\n                }\r\n                returnFiber.lastEffect = currentFiber\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 开始处理下线\r\n * \r\n * completeUnitOfWork\r\n * @param {*} fiber \r\n */\r\nfunction beginWork(currentFiber) {\r\n    // 1.创建dom 元素\r\n    // 2. 创建子fiber\r\n    if (currentFiber.tag === TAG_ROOT) { //根节点fiber\r\n        updateHostRoot(currentFiber)\r\n    } else if (currentFiber.tag === TAG_TEXT) { //文本fiber\r\n        updateHostText(currentFiber)\r\n    } else if (currentFiber.tag === TAG_HOST) { //原生domfiber\r\n        updateHost(currentFiber)\r\n    } else if (currentFiber.tag === TAG_CLASS) { // 类组件fiber\r\n        updateClassComponent(currentFiber)\r\n    } else if (currentFiber.tag === TAG_FUNCTION_COMPONENT) { // 函数组件fiber\r\n        updateFunctionComponent(currentFiber)\r\n    }\r\n}\r\n\r\nfunction updateHostRoot(currentFiber) { //处理根节点\r\n    // 先处理自己，如果是一个原生节点，创建真实dom 2. 创建子fiber\r\n    let newChildren = currentFiber.props.children\r\n    reconcilieChildren(currentFiber, newChildren) // 调和子节点 [A1]\r\n}\r\n\r\nfunction updateHostText(currentFiber) { // 创建文本节点\r\n    if (!currentFiber.stateNode) {\r\n        currentFiber.stateNode = createDom(currentFiber)\r\n    }\r\n}\r\n\r\nfunction updateHost(currentFiber) { // 处理原生dom 节点\r\n    if (!currentFiber.stateNode) {\r\n        currentFiber.stateNode = createDom(currentFiber)\r\n    }\r\n    reconcilieChildren(currentFiber, currentFiber.props.children)\r\n}\r\n\r\nfunction updateClassComponent(currentFiber) { // 处理类组件\r\n    if (!currentFiber.stateNode) { //类组件的fiber 的 stateNode  是组件的实例\r\n        currentFiber.stateNode = new currentFiber.type(currentFiber.props)\r\n        currentFiber.stateNode.internalFiber = currentFiber\r\n        currentFiber.updateQueue = new UpdateQueue()\r\n    }\r\n    // 给组件的实例的state 赋值\r\n    currentFiber.stateNode.state = currentFiber.updateQueue.forceUpdate(currentFiber.stateNode.state)\r\n    reconcilieChildren(currentFiber, [currentFiber.stateNode.render()])\r\n}\r\n\r\nfunction updateFunctionComponent(currentFiber) { // 处理函数组件\r\n    workInProgressFiber = currentFiber\r\n    hookIndex = 0\r\n    workInProgressFiber.hooks = []\r\n    const newChild = currentFiber.type(currentFiber.props)\r\n    reconcilieChildren(currentFiber, [newChild])\r\n}\r\n\r\n\r\n\r\n\r\nfunction createDom(currentFiber) { // 根据fiber 创建真实的dom\r\n    if (currentFiber.tag === TAG_TEXT) {\r\n        return document.createTextNode(currentFiber.props.text)\r\n    } else if (currentFiber.tag === TAG_HOST) {\r\n        let stateNode = document.createElement(currentFiber.type)\r\n        updatDOM(stateNode, {}, currentFiber.props)\r\n        return stateNode\r\n    }\r\n}\r\n\r\nfunction updatDOM(dom, oldProps, newProps) {\r\n    if (dom && dom.setAttribute)\r\n        setProps(dom, oldProps, newProps)\r\n}\r\n\r\nfunction reconcilieChildren(currentFiber, newChildren) { // 当前fiber  newchild 子节点的虚拟dom  [A1]\r\n    let newChildIndex = 0; // 新子节点的索引\r\n    let prevSibling; // 上一个新的子fiber\r\n    // 如果说currentFiber 有alternate 并且 currentFiber.alternate 有child 属性\r\n\r\n    let oldFiber = currentFiber.alternate && currentFiber.alternate.child\r\n    if (oldFiber) oldFiber.firstEffect = oldFiber.lastEffect = oldFiber.nextEffect = null\r\n        //遍历我们的子虚拟dom 元素数组 为每个虚拟dom创建fiber\r\n    while (newChildIndex < newChildren.length || oldFiber) {\r\n        let newChild = newChildren[newChildIndex] // 取出虚拟dom 节点 元素节点\r\n        let newFiber; // 新的fiber\r\n        const sameType = oldFiber && newChild && oldFiber.type === newChild.type\r\n\r\n        let tag;\r\n        if (newChild && typeof newChild.type === 'function' && newChild.type.prototype.isReactComponent) {\r\n            tag = TAG_CLASS\r\n        } else if (newChild && typeof newChild.type === 'function') {\r\n            tag = TAG_FUNCTION_COMPONENT\r\n        } else if (newChild && newChild.type === ELEMENT_TEXT) {\r\n            tag = TAG_TEXT // 这是一个文本节点\r\n        } else if (newChild && typeof newChild.type === 'string') {\r\n            tag = TAG_HOST // 这是一个原生dom节点\r\n        } // beginWork创建fiber， 在completeUnitOfWork 的时候 收集effect\r\n        if (sameType) { // 说明老fiber 和新的虚拟dom 的类型 一样  可以复用老的dom 节点 更新dom 节点就可以了\r\n            if (oldFiber.alternate) { // 说明至少已经更新过一次\r\n                newFiber = oldFiber.alternate // 如果有上 上次的fiber  就复用对象 而不用 新创建对象 currentFiber.alternate.alternate\r\n                newFiber.props = newChild.props\r\n                newFiber.alternate = oldFiber\r\n                newFiber.effectTag = UPDATE\r\n                newFiber.updateQueue = oldFiber.updateQueue || new UpdateQueue()\r\n                newFiber.nextEffect = null\r\n            } else {\r\n                newFiber = {\r\n                    tag: oldFiber.tag,\r\n                    type: oldFiber.type,\r\n                    props: newChild.props, // 一定要用新的虚拟dom 的props\r\n                    stateNode: oldFiber.stateNode,\r\n                    updateQueue: oldFiber.updateQueue || new UpdateQueue(),\r\n                    return: currentFiber,\r\n                    alternate: oldFiber, //让新fiber 的alternate 指向老的fiber\r\n                    effectTag: UPDATE, // 副作用标识 render 我们会收集副作用 \r\n                    nextEffect: null // effect list 也是一个单链表 \r\n                }\r\n            }\r\n        } else {\r\n            if (newChild) { //看看新的虚拟dom 是不是为null\r\n                newFiber = {\r\n                    tag,\r\n                    type: newChild.type,\r\n                    props: newChild.props,\r\n                    stateNode: null,\r\n                    return: currentFiber,\r\n                    updateQueue: new UpdateQueue(),\r\n                    effectTag: PLACEMENT, // 副作用标识 render 我们会收集副作用 \r\n                    nextEffect: null // effect list 也是一个单链表\r\n                }\r\n            }\r\n            if (oldFiber) {\r\n                oldFiber.effectTag = DELETION\r\n                deletion.push(oldFiber)\r\n            }\r\n        }\r\n        if (oldFiber) {\r\n            oldFiber = oldFiber.sibling //oldFiber指针向后移动一次\r\n        }\r\n        // 创建链表  最小的儿子 没有sibling\r\n        if (newFiber) {\r\n            if (newChildIndex === 0) { // 索引为0 第一个儿子  \r\n                currentFiber.child = newFiber\r\n            } else {\r\n                prevSibling.sibling = newFiber\r\n            }\r\n            prevSibling = newFiber\r\n        }\r\n        newChildIndex++\r\n    }\r\n\r\n}\r\n\r\nfunction useReducer(reducer, initalValue) {\r\n    let newHook = workInProgressFiber.alternate && workInProgressFiber.alternate.hooks && workInProgressFiber.alternate.hooks[hookIndex]\r\n    if (newHook) {\r\n        // 第二次 或者第二次以后渲染 函数组件\r\n        newHook.state = newHook.updateQueue.forceUpdate(newHook.state)\r\n    } else {\r\n        newHook = {\r\n            state: initalValue,\r\n            updateQueue: new UpdateQueue()\r\n        }\r\n    }\r\n    const dispatch = (action) => {\r\n        let payload = reducer ? new Update(reducer(newHook.state, action)) : action\r\n        newHook.updateQueue.enqueueUpdate(payload)\r\n        scheduleRoot()\r\n    }\r\n    workInProgressFiber.hooks[hookIndex++] = newHook;\r\n    return [newHook.state, dispatch]\r\n}\r\nexport { scheduleRoot, useReducer }","import { ELEMENT_TEXT } from './constants'\r\nimport { Update } from './UpdateQuenu'\r\nimport { scheduleRoot, useReducer } from './scheduler'\r\n/**\r\n * 创建元素虚拟dom 的方法\r\n * @param {*} tag \r\n * @param {*} props \r\n * @param  {...any} children \r\n */\r\n\r\nfunction createElement(type, config, ...children) {\r\n    return {\r\n        type: type,\r\n        props: {\r\n            ...config,\r\n            children: children.map(child => { // 兼容处理  如果是element 元素  就返回自己 如果 是字符串  就自己封装一个文本元素对象\r\n                return typeof child === 'object' ? child : {\r\n                    type: ELEMENT_TEXT,\r\n                    props: { text: child, children: [] }\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nclass Component {\r\n    constructor(props) {\r\n        this.props = props\r\n            // this.UpdataQuenu = new UpdataQuenu()\r\n    }\r\n    setState(playload) {\r\n        let update = new Update(playload)\r\n            //UpdataQuenu 其实是放在此类组件对应的fiber节点上 internalFiber\r\n        this.internalFiber.updateQueue.enqueueUpdate(update)\r\n        scheduleRoot() // 从根节点开始调度\r\n    }\r\n}\r\nComponent.prototype.isReactComponent = {}\r\nconst React = {\r\n    createElement,\r\n    Component,\r\n    useReducer\r\n}\r\nexport default React","import { TAG_ROOT } from './constants'\r\nimport { scheduleRoot } from './scheduler'\r\nconst ReactDOM = {\r\n    render\r\n}\r\n\r\n/**\r\n * 把一个元素 渲染到容器\r\n */\r\nfunction render(element, container) { // container == root 真是dom\r\n    let rootFiber = {\r\n        tag: TAG_ROOT, //每个fiber 都有一个tag  标识 元素的类型\r\n        stateNode: container, // 一般情况下如果这个元素是一个原生节点，stateNode指向真实dom元素\r\n        //props.children  是一个数组 里面放的是react 元素 虚拟dom  后面在递归阶段 会 根据react 递归创建 fiber\r\n        props: { children: [element] } //当前filer 的children 属性是将要渲染的元素 在当前fiber 内还不是filer  \r\n    }\r\n    scheduleRoot(rootFiber)\r\n}\r\n\r\nexport default ReactDOM","import React from './react';\nimport ReactDOM from './react-dom';\n// 类组件设计开发\n// userState 是一个语法糖 是基于useReducer实现的  先看userReducer\n// class ClassCounter extends React.Component {\n//   constructor (props) {\n//     super(props)\n//     this.state = {\n//       number:0\n//     }\n//   }\n//   onClick = () => {\n//     this.setState (state=> ({number:state.number+1}))\n//   }\n//   render() {\n//     return (\n//       <div id=\"counter\">\n//         <span>{this.state.number}</span>\n//         <button onClick={this.onClick.bind(this)}>加1</button>\n//       </div>\n//     )\n//   }\n// }\n// // console.log(new ClassCounter(),\"<ClassCounter />\")\nfunction FunctionCounter () {\n  const [countState,dispatch] = React.useReducer(reducer,{count:0})\n  return (\n    <div id=\"counter\">\n      <span>{countState.count}</span>\n      <button onClick={() => {dispatch({type:'ADD'})}}>加1</button>\n    </div>\n  )\n}\n\nfunction reducer(state,action) {\n  switch (action.type) {\n    case 'ADD':\n      return { count:state.count +1}\n    default:\n      return state  \n  }\n}\nReactDOM.render(<FunctionCounter  name=\"计数器\"/>, document.getElementById('root'))\n\n// console.log(React.createElement)\n// let style = {border:'3px solid red',margin:'5px'}\n// let element1 = (\n//   <div id=\"A1\" style ={style}>\n//     A1\n//     <div id=\"B1\" style ={style}>\n//       B1\n//       <div id=\"C1\" style ={style}>\n//       C1\n//       </div>\n//       <div id=\"C2\" style ={style}>\n//       C2\n//       </div>\n//     </div>\n//     <div id='B2' style ={style}>B2</div>\n//   </div>\n// )\n// ReactDOM.render(\n//   element1,\n//   document.getElementById('root')\n// );\n\n// let render2 = document.getElementById('render2')\n// render2.addEventListener('click',()=>{\n//   let element2 = (\n//     <div id=\"A1\" style ={style}>\n//       A1-new\n//       <div id=\"B1\" style ={style}>\n//       B2-new\n//         <div id=\"C1\" style ={style}>\n//         C1\n//         </div>\n//         <div id=\"C2\" style ={style}>\n//         C2\n//         </div>\n//       </div>\n//       <div id='B2' style ={style}>B2-new</div>\n//       <div id='B3' style ={style}>B3</div>\n//     </div>\n//   )\n//   ReactDOM.render(\n//     element2,\n//     document.getElementById('root')\n//   );\n  \n// })\n\n\n\n// let render3 = document.getElementById('render3')\n// render3.addEventListener('click',()=>{\n//   let element3 = (\n//     <div id=\"A1-new2\" style ={style}>\n//       A1-new2\n//       <div id=\"B1-new2\" style ={style}>\n//         B1-new2\n//         <div id=\"C1-new2\" style ={style}>\n//         C1-new2\n//         </div>\n//         <div id=\"C2-new2\" style ={style}>\n//         C2-new2\n//         </div>\n//       </div>\n//       <div id='B2-new2' style ={style}>B2-new</div>\n//     </div>\n//   )\n//   ReactDOM.render(\n//     element3,\n//     document.getElementById('root')\n//   );\n// })"]}