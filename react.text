
jsx 是一个描述真实dom的纯js对象  操作dom比较消耗性能 但是js基于谷歌的v8引擎在计算js方面速度很快  通过babel  转换为虚拟dom  React.
jsx 的优点 
避免操作真实dom 解决了跨浏览器的兼容性问题
转义过程中进行了xss 处理 防范xss 跨站脚本攻击
容易实现跨平台应用
增量更新
容易实现diff 操作 可以实现差异化更新 虚拟dom 是不是更快   不一定  在第一次渲染的时候比较耗时  但是在更新的时候  更新的元素比较少

虚拟dom 需要消耗额外的 内存   但是在初次渲染的时候更加耗时

react 官网上的解释是 一个用于构建用户界面的javascript库
通过组件化的 构建应用 将应用拆分成组件  组件内实现高内聚 低耦合 方便视图的拆分 和复用
声明式



AST 抽象语法树 是源代码语法结构的一种抽象表示，它以树状结构表示编程语言的语法结构  树状结构中的每一个节点 表示源代码的一个结构




函数式组件 与类组件的相同点 不同点
都可以接收props 然后返回react元素
编程思想不同  类组件是基于面向对象设计编写  函数组件是基于函数式编程编写
内存占用：类组件会实例化构造函数 并保存实例 会占用一定内存
捕获特性:函数组件具有值捕获特性
状态：
生命周期：
跳过跟新:shouldComponentUpdate 类组件 函数式组件 可以用react.memo 实现跳过更新



dom-diff 算法
只比较同级节点
两个fiber 树上 向对应的fiber 节点类型不同时 会删除老的fiber 节点并创建新的fiber 节点
通过key表示元素移动  key fiber 的type 相同进行复用